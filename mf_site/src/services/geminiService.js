import { GoogleGenerativeAI } from "@google/generative-ai";

// Google Gemini API anahtarÄ±nÄ± .env dosyasÄ±ndan alÄ±yoruz.
// Bu anahtar, Google Cloud Console'dan alÄ±nÄ±r ve gÃ¼venli ÅŸekilde saklanmalÄ±dÄ±r.
const API_KEY = import.meta.env.VITE_GEMINI_API_KEY;

// EÄŸer API anahtarÄ± yoksa, konsola uyarÄ± veriyoruz.
if (!API_KEY) {
  console.warn("VITE_GEMINI_API_KEY environment variable bulunamadÄ±!");
}

// Google Gemini AI servisini baÅŸlatÄ±yoruz.
const genAI = new GoogleGenerativeAI(API_KEY);

// KullanÄ±lacak AI modelini seÃ§iyoruz..
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

// Sohbeti (chat) yÃ¶netmek iÃ§in global bir chat objesi tanÄ±mlÄ±yoruz.
let chat = null;

// GÃ¼ncel tarihi alÄ±p, context'e ekliyoruz.
// BÃ¶ylece AI, her zaman doÄŸru tarihi bilir.
const TODAY = new Date();
const GUNCEL_TARIH = TODAY.toLocaleDateString("tr-TR", { year: "numeric", month: "long", day: "numeric" });

// AI'ya, FÄ°ÅžEK hakkÄ±nda bilgi vermesi iÃ§in gerekli tÃ¼m kiÅŸisel bilgileri ve kurallarÄ± context olarak veriyoruz.
// Bu context, AI'nÄ±n her soruya doÄŸru ve kiÅŸisel yanÄ±t vermesini saÄŸlar.
const FISEK_CONTEXT = `
Sen FÄ°ÅžEK'in kiÅŸisel AI asistanÄ±sÄ±n. BugÃ¼nÃ¼n tarihi: ${GUNCEL_TARIH}
AÅŸaÄŸÄ±daki bilgileri kullanarak sorularÄ± yanÄ±tla:

KÄ°ÅžÄ°SEL BÄ°LGÄ°LER:
- Ad Soyad: Muhammet FÄ°ÅžEK
- Unvan: YazÄ±lÄ±m GeliÅŸtirici
- E-posta: muhammetfisek121@gmail.com
- GitHub: https://github.com/muhammetfisek
- LinkedIn: https://www.linkedin.com/in/muhammet-fisek/

- "adres": "Ä°stanbul, TÃ¼rkiye"
- "cinsiyet": "Erkek"
- "dogum_tarihi": "20.01.2002"
- "dogum_yeri": "KadÄ±kÃ¶y/Ä°stanbul"
- "memleket": "Amasya"
- "boy": 173
- "kilo": 70
- "burc": "OÄŸlak"
- "kan_grubu": "A Rh+"
- "medeni_durum": "Bekar"
- "ehliyet bilgisi": "B sÄ±nÄ±fÄ± ehliyet"
- "cocukluk_yillari": "Ä°stanbul'da geÃ§ti"
- "en_sevdigi_yemek": "MantÄ±"
- "en_sevdigi_renk": "Turkuaz"
- "en_sevdigi_muzik_turu": "Rock"
- "en_sevdigi_spor": "Futbol"
- "tuttugu_takÄ±m": "Galatasaray"
- "en_sevdigi_oyun": "Futbol"
- "en_sevdigi_dizi": "Vikings"


EÄžÄ°TÄ°M:
- Bilgisayar MÃ¼hendisliÄŸi Ã¶ÄŸrencisi

YETENEKLER:
Programlama & GeliÅŸtirme:
- Java - Spring Boot (80%)
- React.js (70%)
- Android GeliÅŸtirme(Java) (70%)
- C# (70%)
- C (75%)
- JavaScript (78%)
- HTML/CSS (95%)
- MS-SQL (70%)
- PostgreSQL (50%)
- Veri YapÄ±larÄ± ve Algoritmalar (75%)
- Nesne YÃ¶nelimli Programlama (OOP) (75%)

TasarÄ±m:
- Mobile Android UI/UX (40%)
- Web UI/UX (85%)
- Adobe Photoshop (50%)

Diller:
- TÃ¼rkÃ§e (Ana dil)
- Ä°ngilizce (Ä°leri seviye)

DiÄŸer:
- Problem Ã‡Ã¶zme (85%)
- TakÄ±m Ã‡alÄ±ÅŸmasÄ± (80%)
- Proje YÃ¶netimi (70%)
- HÄ±zlÄ± Ã–ÄŸrenme (90%)

PROJELER:
1. AI-Based Hairdresser Assistant and Business Management App
   - KuafÃ¶rler ve gÃ¼zellik salonlarÄ± iÃ§in randevu yÃ¶netim uygulamasÄ±
   - Backend: Spring Boot, AI: Python-Flask
   - FotoÄŸraf yÃ¼kleyerek saÃ§ kesimi ve bakÄ±m Ã¶nerileri

2. Image Processing and Clustering Application
   - C# Windows Forms ile geliÅŸtirildi
   - K-Means (yoÄŸunluk, RGB, Mahalanobis) ve Sobel kenar bulma algoritmalarÄ±
   - DetaylÄ± piksel ve histogram analizi

3. Sports Complex Application
   - Java ve SQLite ile mobil uygulama
   - GÃ¼nlÃ¼k egzersiz rutinleri oluÅŸturma
   - SaÄŸlÄ±klÄ± yaÅŸam tarzÄ± desteÄŸi

4. Internship Project: User Platform
   - KullanÄ±cÄ± odaklÄ± sosyal etkileÅŸim platformu
   - GÃ¼venli kayÄ±t/giriÅŸ, kullanÄ±cÄ± listeleme, profil yÃ¶netimi

5. Static Website: News
   - HTML ve CSS ile geliÅŸtirildi
   - Haber ve iÃ§erik gÃ¶steren web sitesi

6. Horse-Racing-Game
   - C# ile geliÅŸtirildi
   - 2-4 oyunculu at yarÄ±ÅŸÄ± oyunu

KURALLAR:
1. Sadece FÄ°ÅžEK hakkÄ±nda bilgi ver, baÅŸka konularda konuÅŸma
2. TÃ¼rkÃ§e yanÄ±t ver
3. Samimi ve yardÄ±msever ol
4. BilmediÄŸin bir ÅŸey varsa dÃ¼rÃ¼stÃ§e sÃ¶yle
5. KÄ±sa ve Ã¶z yanÄ±tlar ver
6. Emoji kullanabilirsin ðŸ˜Š
`;

// KullanÄ±cÄ±dan gelen mesajÄ± AI'ya gÃ¶nderen fonksiyon.
// Bu fonksiyon, chat baÅŸlatÄ±lmamÄ±ÅŸsa Ã¶nce context ile baÅŸlatÄ±r, ardÄ±ndan kullanÄ±cÄ± mesajÄ±nÄ± AI'ya iletir.
export const sendMessage = async (userMessage) => {
  try {
    // API anahtarÄ± kontrolÃ¼. EÄŸer yoksa hata fÄ±rlatÄ±lÄ±r.
    if (!API_KEY) {
      throw new Error("Gemini API anahtarÄ± bulunamadÄ±!");
    }

    // EÄŸer chat baÅŸlatÄ±lmadÄ±ysa, context ile yeni bir sohbet baÅŸlatÄ±lÄ±r.
    if (!chat) {
      chat = model.startChat({
        history: [
          { role: "user", parts: [{ text: FISEK_CONTEXT }] },
          { role: "model", parts: [{ text: "Merhaba! Ben FÄ°ÅžEK'in kiÅŸisel asistanÄ±yÄ±m. Size FÄ°ÅžEK hakkÄ±nda bilgi verebilir ve sorularÄ±nÄ±zÄ± yanÄ±tlayabilirim. NasÄ±l yardÄ±mcÄ± olabilirim? ðŸ˜Š" }] }
        ],
        generationConfig: {
          // AI'nÄ±n dÃ¶ndÃ¼receÄŸi maksimum token (kelime/karakter) sayÄ±sÄ±. YÃ¼ksek tutulursa daha uzun yanÄ±tlar alÄ±nÄ±r.
          maxOutputTokens: 4096,
          // YanÄ±tlarÄ±n Ã§eÅŸitliliÄŸini belirler. 0.7 genellikle doÄŸal ve Ã§eÅŸitli yanÄ±tlar iÃ§in idealdir.
          temperature: 0.7,
        },
      });
    }

    // KullanÄ±cÄ± mesajÄ±nÄ± AI'ya gÃ¶nderiyoruz ve yanÄ±tÄ± bekliyoruz.
    const result = await chat.sendMessage(userMessage);
    const response = await result.response;
    const text = response.text();

    // AI'dan gelen yanÄ±tÄ± dÃ¶ndÃ¼rÃ¼yoruz.
    return { success: true, text };

  } catch (error) {
    // Hata oluÅŸursa, konsola detaylÄ± hata yazÄ±lÄ±r ve kullanÄ±cÄ±ya uygun mesaj gÃ¶sterilir.
    console.error("Gemini API HatasÄ±:", error);
    let errorMessage = "ÃœzgÃ¼nÃ¼m, ÅŸu anda yanÄ±t veremiyorum. LÃ¼tfen daha sonra tekrar deneyin.";
    if (error.message.includes("API anahtarÄ±")) {
      errorMessage = "API baÄŸlantÄ±sÄ±nda sorun var. LÃ¼tfen daha sonra tekrar deneyin.";
    } else if (error.message.includes("quota")) {
      errorMessage = "API kotasÄ± dolmuÅŸ. LÃ¼tfen daha sonra tekrar deneyin.";
    }
    return { success: false, text: errorMessage };
  }
};

// Sohbeti sÄ±fÄ±rlamak iÃ§in kullanÄ±lÄ±r. Yeni bir konuÅŸma baÅŸlatmak istediÄŸinde Ã§aÄŸrÄ±lÄ±r.
export const clearChatHistory = () => {
  chat = null;
};

// API anahtarÄ±nÄ±n var olup olmadÄ±ÄŸÄ±nÄ± kontrol eden yardÄ±mcÄ± fonksiyon.
export const isApiKeyAvailable = () => {
  return !!API_KEY;
}; 